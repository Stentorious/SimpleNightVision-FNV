; Check for requirements
if Goo1.AuxVarGetFlt "*SNV_Init" 0 == 0
	return
endif

; Keybind events
if Goo1.AuxVarGetFlt "*SNV_Init" 1 == 0
	Goo1.AuxVarSetFlt "*SNV_Init" 1 1
	if eval (int iKeyID = Goo1.AuxVarGetFlt "*SNV_INI" 0) > 0
		SetOnKeyDownEventHandler (CompileScript "ModernNightVision\OnKeyDown.gek") 1 iKeyID
		SetOnKeyUpEventHandler (CompileScript "ModernNightVision\OnKeyUp.gek") 1 iKeyID
	endif
endif

int iTemp = 0

; Reset vision modes
if Goo1.AuxVarType "SNV_Mode" 0 == 0
	Goo1.AuxVarSetFlt "SNV_Mode" 0 0
	Goo1.AuxVarSetFlt "SNV_Mode" 0 1
elseif Goo1.AuxVarGetFlt "SNV_Mode" 1 == 2
	Goo1.AuxVarSetFlt "SNV_Mode" 1 1
endif
Goo1.AuxVarErase "*SNV_Shader"
Goo1.AuxVarSetFlt "*SNV_Animation" 0
SetUIFloatGradual "HUDMainMenu\ModernNightVision\_AlphaStatic" 0
RIMOD NVDLC03GhostNightvisionISFX
RIMOD NVDLC04RedNightvisionISFX

; Remove Cyberware vision mode
if eval Goo1.AuxVarGetFlt "*SNV_INI" 3
	ref rGlobal = EditorIDToFormID "CWxVisionModeLevel"
	ref rQuest = EditorIDToFormID "CWxBionicEyesQuest"
	iTemp = GetGlobalVariable rGlobal
	if eval iTemp > 0
		if eval iTemp == 1
			SetStage rQuest 2
		elseif eval iTemp == 2
			SetStage rQuest 4
		elseif eval iTemp == 3
			SetStage rQuest 6
		endif
		SetGlobalVariable rGlobal 0
		SetStage rQuest 0
		SetStage (EditorIDToFormID "CWxBionicEyesGrainQuest") 0
	endif
endif

; Set event handlers
SetJohnnyOnDyingEventHandler 1 (CompileScript "ModernNightVision\OnDeath.gek") 0
SetOnTimerStopHandler 1 (CompileScript "ModernNightVision\OnAuxTimerStopSupport.gek") "*SNV_KeySupport"
SetOnTimerStartHandler 1 (CompileScript "ModernNightVision\OnAuxTimerStartTher.gek") "*SNV_Thermal"
SetOnTimerStopHandler 1 (CompileScript "ModernNightVision\OnAuxTimerStopToggle.gek") "*SNV_KeyToggle"
SetOnTimerStopHandler 1 (CompileScript "ModernNightVision\EnergyUpdate.gek") "*SNV_Energy"
SetOnTimerStopHandler 1 (begin function {string_var sTimerName, ref rOwnerForm}
	sv_Destruct sTimerName
	if eval Goo1.AuxVarGetFlt "*SNV_INI" 5 == 0
		return
	endif
	EnablePlayerControlsAltEx 30100
end) "*SNV_Animation"

; Update effect
if eval IsFormValid (ref rArmor = Player.GetEqObj 10) && HasKeyword rArmor "SNV_Override"
elseif eval IsFormValid (rArmor = Player.GetEqObj 11) && HasKeyword rArmor "SNV_Override"
else
	rArmor = Caps001
endif
Call (CompileScript "ModernNightVision\UpdateEffect.gek") rArmor

; Update save baked vision mode state and validate what vision modes are available
int iVisionState = Goo1.AuxVarGetFlt "SNV_Mode" 0
int iVisionMode = Goo1.AuxVarGetFlt "SNV_Mode" 1
; Neither
if eval Goo1.AuxVarGetFlt "*SNV_INI" 6 == 0 && Goo1.AuxVarGetFlt "*SNV_INI" 7 == 0
	iVisionState = 0
; Night vision unavailable
elseif eval iVisionMode == 0 && Goo1.AuxVarGetFlt "*SNV_INI" 6 == 0
	iVisionMode = 1
; Thermal vision unavailable
elseif eval Goo1.AuxVarGetFlt "*SNV_INI" 7 == 0
	iVisionMode = 0
endif
Goo1.AuxVarSetFlt "SNV_Mode" iVisionState 0
Goo1.AuxVarSetFlt "SNV_Mode" iVisionMode 1

SetUIFloatAlt "HUDMainMenu\ModernNightVision\_AlphaOverlay" iVisionState
SetUIFloatAlt "HUDMainMenu\ModernNightVision\_EnergyAlpha" iVisionState
SetUIFloatAlt "HUDMainMenu\ModernNightVision\_Mode" -1
SetUIFloatAlt "HUDMainMenu\ModernNightVision\_Mode" iVisionMode

; Vision mode active
if eval iVisionState

	; Apply IMOD
	if eval iVisionMode == 1
		IMOD NVDLC04RedNightvisionISFX
		CallAfterFrames 0 ({} => AuxTimerStart "*SNV_Thermal" 5 30)
	else
		IMOD NVDLC03GhostNightvisionISFX
	endif

	; Update UI
	SetUIFloatGradual "HUDMainMenu\ModernNightVision\_AlphaStatic" 0.8
	SetUIFloatGradual "HUDMainMenu\ModernNightVision\_AlphaStatic" 0.8 (GetUIFloatAlt "HUDMainMenu\ModernNightVision\_Static") 0.5

	; Update energy
	AuxTimerStart "*SNV_Energy" 1 30

endif

; Update energy requirements
if Goo1.AuxVarType "SNV_Mode" 2 == 0
	Goo1.AuxVarSetFlt "SNV_Mode" 0 2
endif
if Goo1.AuxVarType "SNV_Mode" 3 == 0
	Goo1.AuxVarSetFlt "SNV_Mode" 300 3
endif
float fEnergy = Goo1.AuxVarGetFlt "SNV_Mode" 2
float fEnergyMax = Goo1.AuxVarGetFlt "SNV_Mode" 3
string_var sEnergy = "-"
if eval GetUIFloatAlt "HUDMainMenu\ModernNightVision\EnergyDisplay\_ChargeStyle" == 1
	sEnergy = sv_Construct "%g%%" (Flr (((fEnergy / fEnergyMax) * 100) + 0.5))
elseif eval (float fEnergyUse = GetUIFloatAlt "HUDMainMenu\ModernNightVision\_EnergyUseCalc") > 0
	sEnergy = sv_Construct "%gs" (Flr ((fEnergy / fEnergyUse) + 0.5))
endif
SetUIStringAlt "HUDMainMenu\ModernNightVision\EnergyDisplay\ChargeText\string" "%z" sEnergy
SetUIFloatAlt "HUDMainMenu\ModernNightVision\_EnergyCharge" fEnergy
SetUIFloatAlt "HUDMainMenu\ModernNightVision\_EnergyMax" fEnergyMax
sv_Destruct sEnergy
